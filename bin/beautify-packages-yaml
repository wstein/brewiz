#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

class PackageBeautifier
  def initialize(options = {})
    @input_file = options[:input] || 'data/packages.yaml'
    @output_file = options[:output]
    @inplace = options[:inplace] || false
    @dry_run = options[:dry_run] || false
    @line_limit = options[:lines] || 200
  end

  def beautify
    # Load YAML data with error handling
    begin
      # Load all documents from the YAML stream
      docs = YAML.load_stream(File.read(@input_file))
      # Find the document that contains the categories array
      data = docs.find { |d| d.is_a?(Array) }
      unless data
        puts "Error: Could not find categories array in '#{@input_file}'"
        exit 1
      end
    rescue Errno::ENOENT
      puts "Error: Input file '#{@input_file}' not found."
      exit 1
    rescue Psych::SyntaxError => e
      puts "Error: YAML syntax error in '#{@input_file}': #{e.message}"
      exit 1
    end

    # Process data
    processed_data = process_data(data)

    # Generate custom formatted YAML
    yaml_output = "---\n" + custom_yaml_formatter(processed_data)

    # Handle output based on options
    if @dry_run
      puts yaml_output.split("\n").take(@line_limit).join("\n")
      puts "Showing first #{@line_limit} lines (dry run)"
    elsif @inplace
      begin
        File.write(@input_file, yaml_output)
        puts "Beautified YAML updated in place: #{@input_file}"
      rescue => e
        puts "Error writing to '#{@input_file}': #{e.message}"
        exit 1
      end
    elsif @output_file
      begin
        File.write(@output_file, yaml_output)
        puts "Beautified YAML written to #{@output_file}"
      rescue => e
        puts "Error writing to '#{@output_file}': #{e.message}"
        exit 1
      end
    else
      puts yaml_output
    end
  end

  private

  def process_data(data)
    # Process each category
    processed_data = data.map do |category|
      # Fix HTML entities in names
      category['name'] = unescape_html(category['name'])

      # Use smart line breaking for category descriptions
      category['desc'] = smart_line_break(category['desc'])

      # Process packages in this category
      category['packages'] = (category['packages'] || []).map do |package|
        # Normalize tags to array
        package['tags'] = normalize_tags(package['tags'])

        # Use smart line breaking for package descriptions
        package['desc'] = smart_line_break(package['desc'])

        # Format info for multi-line display with smart line breaking
        if package['info']
          package['info'] = package['info'].split("\n").map { |line|
            smart_line_break(line)
          }.join("\n")
        end

        package
      end

      # Sort packages by name, then by ID as secondary criteria
      category['packages'].sort_by! { |pkg| [pkg['name'].to_s.downcase, pkg['id'].to_s.downcase] }

      category
    end

    # Sort categories with special handling for 'uncategorized'
    processed_data.sort_by! do |cat|
      if cat['id'] == 'uncategorized'
        # Give 'uncategorized' a high value to ensure it appears at the end
        'zzzzzzzzz'
      else
        cat['name'].to_s.downcase
      end
    end

    processed_data
  end

  def normalize_tags(tags)
    return [] if tags.nil?

    # Convert to regular array if it's a special type
    if !tags.is_a?(Array)
      tags = [tags]
    elsif tags.class.name != 'Array'
      tags = tags.to_a
    end

    # Convert all tags to strings
    tags.map(&:to_s)
  end

  def format_multiline_text(text)
    return text unless text.is_a?(String)
    return text if text.length <= 100  # Don't modify if already short enough

    # Split by spaces, then combine into lines of reasonable length
    words = text.split(/\s+/)
    lines = []
    current_line = ""

    words.each do |word|
      # If adding this word would make the line too long, start a new line
      if current_line.empty?
        current_line = word
      elsif current_line.length + word.length + 1 > 100
        lines << current_line
        current_line = word
      else
        current_line += " " + word
      end
    end

    # Don't forget the last line
    lines << current_line unless current_line.empty?

    # Only return multiline format if we actually created multiple lines
    lines.size > 1 ? lines.join("\n") : text
  end

  def unescape_html(text)
    return text unless text.is_a?(String)
    text.gsub('&amp;', '&')
        .gsub('&#39;', "'")
        .gsub('&quot;', '"')
        .gsub('&lt;', '<')
        .gsub('&gt;', '>')
        .gsub('&nbsp;', ' ')
  end

  # Process text that might contain YAML special characters
  def format_yaml_value(text)
    return text unless text.is_a?(String)

    # Check if the text contains characters that need special handling in YAML
    if text.match?(/[:"'\[\]{}|>]/) || text.include?("\n")
      # For multi-line text, use block scalar with pipe
      if text.include?("\n")
        # Return just the text since our custom formatter will handle the pipe and indentation
        text
      else
        # For single line with special chars, quote it
        "'#{text.gsub("'", "''").gsub("\\", "\\\\")}'"
      end
    else
      text
    end
  end

  # Custom YAML formatter to match the exact required style
  def custom_yaml_formatter(data)
    output = ""

    data.each do |category|
      output << "- id: #{category['id']}\n"
      output << "  name: #{category['name']}\n"

      # Handle category description with proper multi-line formatting
      if category['desc'] && category['desc'].include?("\n")
        output << "  desc: >-\n"
        category['desc'].split("\n").each do |line|
          output << "    #{line}\n"
        end
      else
        output << "  desc: #{format_yaml_value(category['desc'])}\n"
      end

      # Always print packages array, even if empty, and NO trailing space
      output << "  packages:"
      if category['packages'] && !category['packages'].empty?
        output << "\n"
        category['packages'].each do |package|
          output << "  - name: #{package['name']}\n"

          # Handle package description with proper multi-line formatting
          if package['desc'] && package['desc'].include?("\n")
            output << "    desc: >-\n"
            package['desc'].split("\n").each do |line|
              output << "      #{line}\n"
            end
          else
            output << "    desc: #{format_yaml_value(package['desc'])}\n"
          end

          output << "    homepage: #{package['homepage']}\n"

          # Add cask field if present
          output << "    cask: true\n" if package['cask']

          # Format info field as a proper YAML block scalar
          if package['info']
            if package['info'].include?("\n")
              output << "    info: >-\n"
              # Split by newlines and add proper indentation for each line
              package['info'].split("\n").each do |line|
                output << "      #{line}\n"
              end
            else
              output << "    info: #{format_yaml_value(package['info'])}\n"
            end
          end

          output << "    id: #{package['id']}\n" if package['id']

          # Format tags as single line [tag1, tag2, tag3]
          if package['tags'] && !package['tags'].empty?
            tags_str = "[#{package['tags'].join(', ')}]"
            output << "    tags: #{tags_str}\n"
          else
            output << "    tags: []\n"
          end
        end
      else
        output << " []\n"
      end
    end

    output
  end

  # Wrap text to a specified line length while preserving YAML indentation
  def wrap_text(text, line_length = 100)
    return text unless text.is_a?(String)

    # Don't wrap if already short enough
    return text if text.length <= line_length

    # For multi-line text, just return it directly - we'll handle it with block scalar format
    return text if text.include?("\n")

    # For single line text that needs to be wrapped, use "|" format in YAML
    # The actual wrapping will be handled in the custom_yaml_formatter
    format_multiline_text(text)
  end

  # Split long text into multiple lines with proper YAML indentation
  def smart_line_break(text, max_length = 100)
    return text unless text.is_a?(String)
    return text if text.length <= max_length

    words = text.split(/\s+/)
    result = []
    current_line = ""

    words.each do |word|
      if current_line.empty?
        current_line = word
      elsif current_line.length + word.length + 1 > max_length
        result << current_line
        current_line = word
      else
        current_line += " " + word
      end
    end

    result << current_line unless current_line.empty?
    result.join("\n")
  end
end

# Parse command line options
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on('-i', '--input FILE', 'Input YAML file') do |file|
    options[:input] = file
  end

  opts.on('-o', '--output FILE', 'Output YAML file (default: stdout)') do |file|
    options[:output] = file
  end

  opts.on('-I', '--inplace', 'Edit file in place (like sed -i)') do
    options[:inplace] = true
  end

  opts.on('-d', '--dry-run', 'Dry run (only print first N lines)') do
    options[:dry_run] = true
  end

  opts.on('-l', '--lines N', Integer, 'Number of lines to print in dry run (default: 200)') do |n|
    options[:lines] = n
  end

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end.parse!

# Run the beautifier
PackageBeautifier.new(options).beautify

__END__

## How to Use:

Usage: bin/beautify-packages-yaml [options]
    -i, --input FILE                 Input YAML file
    -o, --output FILE                Output YAML file (default: stdout)
    -I, --inplace                    Edit file in place (like sed -i)
    -d, --dry-run                    Dry run (only print first N lines)
    -l, --lines N                    Number of lines to print in dry run (default: 200)
    -h, --help                       Show this help message

## Usage Examples:

- Basic: `./beautify-packages-yaml`
- Custom input: `./beautify-packages-yaml -i path/to/packages.yaml`
- Save output: `./beautify-packages-yaml -o beautified.yaml`
- Edit in place: `./beautify-packages-yaml -i path/to/packages.yaml -I`
- Dry run: `./beautify-packages-yaml -d`
- Custom line limit: `./beautify-packages-yaml -d -l 50`

## Output Format:

```yaml
---
- id: ai
  name: AI & Machine Learning
  desc: Tools for artificial intelligence, machine learning, and large language models.
  packages:
  - name: ollama
    desc: >-
      Create, run, and share large language models (LLMs). This is an AI model manager that runs
      locally on your machine.
    homepage: https://ollama.com/
    info: >-
      Ollama is a tool for running and managing large language models locally. It allows you to easily
      run, create, and customize AI models on your own hardware, with support for various open-source
      models.
    id: homebrew/core/ollama
    tags: [llm, local-ai, machine-learning, models]
- id: archive
  name: Archiving & Compression
  desc: Tools for compressing, archiving, and extracting files.
  packages:
  - name: p7zip
    desc: 7-Zip (high compression file archiver) implementation
    homepage: https://github.com/p7zip-project/p7zip
    info: >-
      p7zip is a port of 7-Zip for POSIX systems, providing high compression ratio in 7z format and
      supporting various other archive formats.
    id: homebrew/core/p7zip
    tags: [compression, archive, 7zip, file-management]
  - name: RAR Archiver
    desc: Archive manager for data compression and backups
    homepage: https://www.rarlab.com/
    cask: true
    info: >-
      RAR is a proprietary archive file format that supports data compression, error recovery, and file
      spanning. This package provides tools to create and extract RAR archives.
    id: homebrew/cask/rar
    tags: [compression, archive, rar, proprietary, backup]
...
```

## Features:

- Sorts categories alphabetically
- Sorts packages within categories by name, then by ID
- Uses single-line array format for tags
- Preserves multi-line text fields
- Smart line breaking for long descriptions
- Preview changes with dry run
- Handles HTML entity unescaping
- Properly formats YAML special characters

This script beautifies packages.yaml while maintaining its structure and semantics.
