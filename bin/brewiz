#!/usr/bin/env ruby

VERSION = '0.9.11'

require 'json'
require 'logger'
require 'net/http'
require 'open-uri'
require 'open3'
require 'optparse'
require 'ostruct'
require 'webrick'
require 'yaml'

class Command
  class CommandError < StandardError; end

  def run(args)
    run_server(parse_options(args))
  rescue OptionParser::InvalidOption => e
    puts "Error: #{e.message}"
    puts parse_options(["-h"])
    exit 1
  end

  private

  def run_server(options)
    Server.new(options).start
  end

  def show_version
    puts "brewiz #{VERSION}"
  end

  def default_options
    {
      port: 8047,
      address: 'localhost',
      packages_yaml: 'https://brewiz.github.io/data/packages.yaml',
      app_url: "https://raw.githubusercontent.com/wstein/brewiz/refs/tags/v#{VERSION}/app/dist",
    }
  end

  def parse_options(args)
    options = default_options

    OptionParser.new do |opts|
      opts.banner = "Usage: brewiz [options]"

      add_options(opts, options)
    end.parse!(args)

    options
  end

  def print_zsh_completion
    puts <<~EOF
      #compdef brewiz

      function _brewiz_packages() {
          local ret=1
          # Complete local files with .yaml extension
          _files -g "*.yaml" && ret=0
          return ret
      }

      local arguments

      arguments=(
        {-a,--address}'[Address to run Server on]:address'
        {-c,--cache}'[Enable caching of brew info results]'
        '--zsh-completion[Generate zsh completion script]'
        {-h,--help}'[Show this help message]'
        '--no-open[Do not open browser automatically]'
        '--packages[URL or file path to packages.yaml package list]:location:_brewiz_packages'
        {-p,--port}'[Port to run Server on]:port'
        {-v,--version}'[Show version]'
      )

      _arguments -s $arguments
    EOF
  end

  def add_options(opts, options)
    opts.on("-a", "--address ADDRESS", "Address to run Server on") { |v| options[:address] = v }
    opts.on("-p", "--port PORT", Integer, "Port to run Server on") { |v| options[:port] = v }
    opts.on('-c', '--cache', 'Enable caching of brew info results') { |v| options[:cache_enabled] = v }
    opts.on("--packages LOCATION", "URL or file path to packages.yaml package list") { |v| options[:packages_yaml] = v }
    opts.on("--no-open", "Do not open browser automatically") { options[:no_open] = 1 }
    opts.on("--zsh-completion", "Generate zsh completion script") { print_zsh_completion; exit }
    opts.on("-v", "--version", "Show version") { show_version; exit }
    opts.on("-h", "--help", "Show this help message") { puts opts; exit }
  end
end

class Homebrew
  def initialize
    check_brew_installed
  end

  def info
    puts "Getting local Packages..."
    output = brew_cmd('info', '--installed', '--json=v2')
    data = JSON.parse(output)
    process_info(data['formulae'], false) + process_info(data['casks'], true)
  end

  def update
    puts "Updating Homebrew..."
    res = brew_cmd('update')
    puts res if res.length > 0
  end

  private

  def find_brew
    brew = ['/opt/homebrew/bin/brew', '/usr/local/bin/brew', './mock/bin/brew'].find { |path| File.exist?(path) }
    if brew == './mock-brew/bin/brew'
      puts "Homebrew seems not to be installed. Using mock brew."
    end
    brew
  end

  def check_brew_installed
    return if @brew = find_brew

    puts <<~ERROR
    Error: Homebrew is not installed!"

    Check out https://docs.brew.sh/Installation to see how to install Homebrew and
    follow the instructions. That'll finally get you to run this command:

      $ curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash -s
    ERROR

    exit 1
  end

  def brew_cmd(*args)
    stdout, stderr, status = Open3.capture3(@brew, *args)
    raise stderr unless status.success?
    stdout
  end

  def process_info(packages, is_cask)
    packages.map do |pkg|
      {
        'name' => is_cask ? pkg['name'][0] : pkg['name'],
        'id' => "#{pkg['tap']}/#{is_cask ? pkg['token'] : pkg['name']}",
        'desc' => pkg['desc'],
        'homepage' => pkg['homepage'],
        'installed' => true,
        'installed_on_request' => is_cask || pkg['installed'].any? { |i| i['installed_on_request'] },
        'outdated' => pkg['outdated'],
        'cask' => is_cask,
        'token' => pkg['token'],
        'versions' => is_cask ? [ pkg['version'] ] : pkg['installed'].map { |i| i['version'] },
        'latest_version' => is_cask ? pkg['version'] : pkg['versions']['stable']
    }.select { |k, v| v }
    end
  end
end

class PackageManager
  attr_reader :packages

  def initialize(homebrew, options)
    @homebrew = homebrew
    @options = options
    @cache_time = 60 * 60
    @cache_file = File.join(Dir.home, '.cache', 'brewiz', 'packages.yaml')
  end

  def reload
    @packages = load_config
    update_packages_with_brew_info
    add_missing_infos
    write_packages_to_cache
    @packages
  end

  def read_from_cache_or_reload_packages
    reload unless read_packages_from_cache
  end
  def add_missing_infos
    standard_taps = ['homebrew/cask', 'homebrew/core'].freeze

    @packages.each do |category|
      category['packages'].each do |pkg|
        tap, _, token = pkg['id'].rpartition('/')
        pkg['tap'] = tap unless standard_taps.include?(tap)
        pkg['token'] = token if pkg['cask'] && !pkg.key?('token')
      end
    end
  end

  def load_config
    YAML.safe_load(
      if @options[:packages_yaml].start_with?('http')
        URI.open(@options[:packages_yaml]).read
      else
        File.read(@options[:packages_yaml])
      end
    )
  end

  def update_packages_with_brew_info
    @homebrew.update
    brew_info = @homebrew.info.to_h { |pkg| [pkg['id'], pkg] }

    @packages.each do |category|
      category['packages'].map! do |pkg|
        pkg.merge(brew_info.delete(pkg['id']) || {}).select { |_, v| v }
      end
      category['packages'].sort_by! { |pkg| pkg['name'].downcase }
    end

    add_uncategorized_packages(brew_info)
  end

  def add_uncategorized_packages(remaining_packages)
    uncategorized = @packages.find { |cat| cat['id'] == 'uncategorized' }
    return unless uncategorized

    uncategorized['packages'] += remaining_packages.values.select { |pkg| pkg['installed_on_request'] }
    @packages.delete(uncategorized) if uncategorized['packages'].empty?
    @packages.sort_by! { |cat| [cat['id'] == 'uncategorized' ? 1 : 0, cat['name'].downcase] }
  end

  def read_packages_from_cache
    return false unless @options[:cache_enabled]

    FileUtils.mkdir_p(File.dirname(@cache_file))
    return false unless File.exist?(@cache_file) && File.mtime(@cache_file) > Time.now - @cache_time

    @packages = YAML.safe_load(File.read(@cache_file))
    true
  end

  def write_packages_to_cache
    return unless @options[:cache_enabled] && @packages

    FileUtils.mkdir_p(File.dirname(@cache_file))
    File.write(@cache_file, YAML.dump(@packages))
  end
end

class RequestHandler < WEBrick::HTTPServlet::AbstractServlet
  def initialize(server, homebrew, package_manager, options)
    super(server)
    @homebrew = homebrew
    @package_manager = package_manager
    @options = options
  end

  def do_GET(request, response)
    case request.path
    when '/api/v1/packages'
      json_response(response, @package_manager.packages)
    when '/api/v1/reload'
      json_response(response, @package_manager.reload)
    when '/api/v1/version'
      json_response(response, {
        brewiz: VERSION,
      })
    else
      serve_static_file(request, response)
    end
  end

  def do_POST(request, response)
    case request.path
    when '/api/v1/terminate'
      @server.shutdown
      json_response(response, { status: 'terminating' })
    else
      super
    end
  end

  private

  def json_response(response, data)
    response['Content-Type'] = 'application/json'
    response.body = data.to_json
  end

  def serve_static_file(request, response)
    case request.path
    when '/homebrew.svg'
      serve_homebrew_svg(response)
    when '/'
      serve_frontend_assets('/index.html', response)
    else
      serve_frontend_assets(request.path, response)
    end
  end

  def serve_homebrew_svg(response)
    response['Content-Type'] = 'image/svg+xml'
    response.body = URI.open('https://upload.wikimedia.org/wikipedia/commons/9/95/Homebrew_logo.svg').read
  end

  def serve_frontend_assets(path, response)
    URI.open(@options[:app_url] + path) do |proxy|
      response['Content-Type'] = determine_content_type(path, proxy.content_type)
      response.body = proxy.read
    end
  end

  def determine_content_type(path, type)
    if type == 'text/plain'
      case File.extname(path)
      when '.js' then 'application/javascript'
      when '.css' then 'text/css'
      else 'text/html'
      end
    else
      type
    end
  end
end

class Server
  def initialize(options)
    @options = options
    @homebrew = Homebrew.new
    @package_manager = PackageManager.new(@homebrew, options)
  end

  def start
    @package_manager.read_from_cache_or_reload_packages
    @server = setup_server
    open_browser unless @options[:no_open]
    puts "Press Ctrl-C to stop"
    @server.start
  rescue Interrupt
    @server.shutdown
  rescue StandardError => e
    raise "Error starting server: #{e.message}"
  end

  private

  def setup_server
    frontend_server_port_open?
    puts "Starting Server on http://#{@options[:address]}:#{@options[:port]}"
    server = WEBrick::HTTPServer.new(
      Port: @options[:port],
      BindAddress: @options[:address],
      Logger: WEBrick::Log.new($stderr, WEBrick::Log::INFO),
      AccessLog: @options[:access_log] ? [[$stderr, WEBrick::AccessLog::COMBINED_LOG_FORMAT]] : []
    )
    server.mount('/', RequestHandler, @homebrew, @package_manager, @options)
    trap('INT') { server.shutdown }
    server
  end

  def open_browser
    Thread.new do
      sleep(0.2) until port_open?

      puts "Opening http://#{@options[:address]}:#{@options[:port]} in your browser..."
      system('open', "http://#{@options[:address]}:#{@options[:port]}")
    end
  end

  def port_open?
    Net::HTTP.get_response(URI("http://#{@options[:address]}:#{@options[:port]}")).is_a?(Net::HTTPSuccess)
  rescue StandardError
    false
  end

  def frontend_server_port_open?
    Net::HTTP.get_response(URI(@options[:app_url]))
  rescue StandardError
    raise "Node server not running on #{@options[:app_url]}"
  end
end


Command.new.run(ARGV)
